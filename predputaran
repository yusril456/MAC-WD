#include "Arduino.h"
#include <Servo.h>
#include <NewPing.h>

#include <Fuzzy.h>
#include <FuzzyComposition.h>
#include <FuzzyInput.h>
#include <FuzzyIO.h>
#include <FuzzyOutput.h>
#include <FuzzyRule.h>
#include <FuzzyRuleAntecedent.h>
#include <FuzzyRuleConsequent.h>
#include <FuzzySet.h>

#define FUZZY_IN_HEIGHT 1
#define FUZZY_IN_VOL 2
#define FUZZY_OUT_SPEED 3

#define TRIGGER_PIN   6
#define ECHO_PIN      5
#define TRIGGER_PIN2  8
#define ECHO_PIN2     7
#define TRIGGER_PIN3  10
#define ECHO_PIN3     9
#define TRIGGER_PIN4  12
#define ECHO_PIN4     11
#define MAX_DISTANCE 100

#define DEBUG true

Servo myservo;
NewPing ultrasonic1(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);
NewPing ultrasonic2(TRIGGER_PIN2, ECHO_PIN2, MAX_DISTANCE);
NewPing ultrasonic3(TRIGGER_PIN3, ECHO_PIN3, MAX_DISTANCE);
NewPing ultrasonic4(TRIGGER_PIN4, ECHO_PIN4, MAX_DISTANCE);
int pos = 0;


Fuzzy *fuzzy = new Fuzzy();

//fuzzifikasi gelas
FuzzySet* rendah = new FuzzySet(0, 0, 2, 5);
FuzzySet* sedang = new FuzzySet(3, 6, 6, 9);
FuzzySet* tinggi = new FuzzySet(7, 10, 15, 15);


//fuzzifikasi air galon
FuzzySet* vol_sedikit = new FuzzySet(0, 0, 8, 12);
FuzzySet* vol_medium = new FuzzySet(10, 14, 14, 18);
FuzzySet* vol_banyak = new FuzzySet(16, 20, 24, 24);

//fuzzifikasi keran
FuzzySet *cepat = new FuzzySet(1100, 2600, 2600, 4100);
FuzzySet *normal = new FuzzySet(4100, 5500, 5500, 6900);
FuzzySet *lambat = new FuzzySet(6900, 7800, 7800, 8700);

float fuzzy_duration_out = 0.0;

FuzzyRule *createNewFuzzyRule(int ruleId, FuzzySet *in1, FuzzySet *in2,
                              FuzzySet *out1) {
  FuzzyRuleConsequent *fzThen = new FuzzyRuleConsequent();
  fzThen->addOutput(out1);

  FuzzyRuleAntecedent *fzIf = new FuzzyRuleAntecedent();
  fzIf->joinWithAND(in1, in2);

  return new FuzzyRule(ruleId, fzIf, fzThen);
}

void fuzzyInit() {
  // FuzzyInput height
  FuzzyInput *fz_height = new FuzzyInput(FUZZY_IN_HEIGHT);
  fz_height->addFuzzySet(rendah);
  fz_height->addFuzzySet(sedang);
  fz_height->addFuzzySet(tinggi);
  fuzzy->addFuzzyInput(fz_height);

   // FuzzyInput vol
  FuzzyInput *fz_vol = new FuzzyInput(FUZZY_IN_VOL);
  fz_vol->addFuzzySet(vol_sedikit);
  fz_vol->addFuzzySet(vol_medium);
  fz_vol->addFuzzySet(vol_banyak);
  fuzzy->addFuzzyInput(fz_vol);

  // FuzzyOutput speed
  FuzzyOutput *fz_speed = new FuzzyOutput(FUZZY_OUT_SPEED);
  fz_speed->addFuzzySet(cepat);
  fz_speed->addFuzzySet(normal);
  fz_speed->addFuzzySet(lambat);
  fuzzy->addFuzzyOutput(fz_speed);

  // fuzzy rule
  fuzzy->addFuzzyRule(
      createNewFuzzyRule(1, rendah, vol_sedikit, normal));

  fuzzy->addFuzzyRule(
      createNewFuzzyRule(2, rendah, vol_medium, cepat));

  fuzzy->addFuzzyRule(
      createNewFuzzyRule(3, rendah, vol_banyak, cepat));

  fuzzy->addFuzzyRule(
      createNewFuzzyRule(4, sedang, vol_sedikit, normal));

  fuzzy->addFuzzyRule(
      createNewFuzzyRule(5, sedang, vol_medium, cepat));

  fuzzy->addFuzzyRule(
      createNewFuzzyRule(6, sedang, vol_banyak, cepat));

  fuzzy->addFuzzyRule(
      createNewFuzzyRule(7, tinggi, vol_sedikit, lambat));

  fuzzy->addFuzzyRule(
      createNewFuzzyRule(8, tinggi, vol_medium, normal));

  fuzzy->addFuzzyRule(
      createNewFuzzyRule(9, tinggi, vol_banyak, normal));
}

void fuzzyProcessInput(float heightx, float volx, float *duration_out) {
  fuzzy->setInput(FUZZY_IN_HEIGHT, heightx);
  fuzzy->setInput(FUZZY_IN_VOL, volx);

  fuzzy->fuzzify();

  *duration_out = fuzzy->defuzzify(FUZZY_OUT_SPEED);
}

void setup() {
  Serial.begin(9600);  
  Serial.println("Inisiasi Fuzzy");
  // init fuzzy
  fuzzyInit();
  Serial.println("Init Selesai");
  myservo.attach(13);
  
  }

void loop() {
 processFuzzySystem();
}
